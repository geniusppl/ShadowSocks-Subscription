name: Update Subscription Link  # 工作流的名称，会在 Actions 列表中显示

on:
  schedule:
    - cron: '0 0 * * *' # UTC 时间每天 00:00 运行 (北京时间每天 08:00)
  workflow_dispatch:  # 允许手动触发工作流

# 添加 permissions 块，授予 workflow contents: write 权限
permissions:
  contents: write

jobs:
  generate_and_update:
    runs-on: ubuntu-latest  # 运行在 Ubuntu 最新版本虚拟机上

    steps:
      - name: Checkout 代码仓库  # 步骤名称：检出代码
        uses: actions/checkout@v3  # 使用 actions/checkout@v3 action，用于检出当前仓库的代码

      - name: 设置 Python 环境  # 步骤名称：设置 Python 环境
        uses: actions/setup-python@v4  # 使用 actions/setup-python@v4 action，用于设置 Python 环境
        with:
          python-version: '3.x'  # 使用 Python 3.x 版本

      - name: 安装 Python 依赖库  # 步骤名称：安装依赖
        run: |
          python -m pip install --upgrade pip  # 升级 pip
          pip install requests pyaes pycryptodome  # 安装脚本所需的库 (如果需要其他库，请添加)

      - name: Run Python script  # 步骤名称：运行 Python 脚本
        run: |
          echo "::group::Python 脚本输出内容"  #  日志分组开始标记
          python generate_subscription.py > subscription_output.txt  # 运行 Python 脚本并将输出重定向到文件
          cat subscription_output.txt  #  为了在日志中显示 subscription_output.txt 文件的内容 (调试用)
          echo "::endgroup::"  # 日志分组结束标记

      - name: Extract Subscription Link  # 步骤名称：提取订阅链接
        id: extract_link  # 给这个步骤设置 ID，方便后续步骤引用输出
        run: |
          subscription_link=$(tail -n 1 subscription_output.txt)  # 从文件中读取 *最后一行* (订阅链接)
          echo "subscription_link=$subscription_link" >> "$GITHUB_OUTPUT"  # 将订阅链接设置为步骤的输出
          echo "SUBSCRIPTION_LINK=$subscription_link" >> "$GITHUB_ENV"  #  将订阅链接设置为环境变量

      - name: Update Subscription Link File  # 步骤名称：更新订阅链接文件
        uses: actions/github-script@v6  # 使用 actions/github-script@v6 action，用于执行 JavaScript 脚本与 GitHub API 交互
        with:
          script: |
           const subscriptionLink = process.env.SUBSCRIPTION_LINK;
           const contentBase64 = Buffer.from(subscriptionLink).toString('base64');
           const path = 'subscription_link.txt';
           const owner = context.repo.owner;
           const repo = context.repo.repo;

           try {
             const getFileResponse = await github.rest.repos.getContent({
               owner: owner,
               repo: repo,
               path: path,
             });

             await github.rest.repos.createOrUpdateFileContents({
               owner: owner,
               repo: repo,
               path: path,
               message: '每日更新订阅链接',
               content: contentBase64,
               sha: getFileResponse.data.sha,
             });
             console.log('订阅链接文件更新成功!');
           } catch (error) {
             if (error.status === 404) {
               await github.rest.repos.createOrUpdateFileContents({
                 owner: owner,
                 repo: repo,
                 path: path,
                 message: '创建订阅链接文件',
                 content: contentBase64,
               });
               console.log('订阅链接文件创建成功!');
             } else {
               console.error('更新/创建订阅链接文件出错:', error);
               throw error;
             }
           }
