name: Update Subscription Link  # 工作流的名称，会在 Actions 列表中显示

on:
  schedule:
    - cron: '0 0 * * *' # UTC 时间每天 00:00 运行 (北京时间每天 08:00)
  workflow_dispatch: # 允许手动触发工作流

# 添加 permissions 块，授予 workflow contents: write 权限
permissions:
  contents: write

jobs:
  generate_and_update:
    runs-on: ubuntu-latest # 运行在 Ubuntu 最新版本虚拟机上

    steps:
      - name: Checkout repository # 步骤名称：检出代码
        uses: actions/checkout@v3 # 使用 actions/checkout@v3 action，用于检出当前仓库的代码

      - name: Set up Python # 步骤名称：设置 Python 环境
        uses: actions/setup-python@v4 # 使用 actions/setup-python@v4 action，用于设置 Python 环境
        with:
          python-version: '3.x' # 使用 Python 3.x 版本

      - name: Install dependencies # 步骤名称：安装依赖
        run: |
          python -m pip install --upgrade pip # 升级 pip
          pip install requests pyaes pycryptodome # 安装脚本所需的库 (如果需要其他库，请添加)

      - name: Run Python script # 步骤名称：运行 Python 脚本
        run: python generate_subscription.py > subscription_output.txt # 运行 Python 脚本并将输出重定向到 subscription_output.txt 文件

      - name: Extract Subscription Link # 步骤名称：提取订阅链接
        id: extract_link # 给这个步骤设置 ID，方便后续步骤引用输出
        run: |
          subscription_link=$(tail -n 1 subscription_output.txt) # 从文件中读取 *最后一行* (订阅链接)
          echo "subscription_link=$subscription_link" >> "$GITHUB_OUTPUT" # 将订阅链接设置为步骤的输出

      - name: Update Subscription Link File # 步骤名称：更新订阅链接文件
        uses: actions/github-script@v6 # 使用 actions/github-script@v6 action，用于执行 JavaScript 脚本与 GitHub API 交互
        with:
          script: |
            const subscriptionLink = "${{ steps.extract_link.outputs.subscription_link }}"; // 从上一步骤的输出中获取订阅链接
            const contentBase64 = Buffer.from(subscriptionLink).toString('base64'); // 将订阅链接内容进行 Base64 编码
            const path = 'subscription_link.txt'; // 文件路径
            const owner = context.repo.owner; // 仓库所有者
            const repo = context.repo.repo; // 仓库名

            try {
              // 尝试获取文件，如果文件已存在
              const getFileResponse = await github.rest.repos.getContent({
                owner: owner,
                repo: repo,
                path: path,
              });

              // 更新文件内容
              await github.rest.repos.createOrUpdateFileContents({
                owner: owner,
                repo: repo,
                path: path,
                message: 'Update subscription link daily', // 提交信息
                content: contentBase64, // Base64 编码后的新内容
                sha: getFileResponse.data.sha, //  SHA 值，用于标识文件版本，确保更新的是最新版本
              });
              console.log('Subscription link file updated successfully!');
            } catch (error) {
              // 如果文件不存在 (例如状态码 404)
              if (error.status === 404) {
                // 创建文件
                await github.rest.repos.createOrUpdateFileContents({
                  owner: owner,
                  repo: repo,
                  path: path,
                  message: 'Create subscription link file', // 提交信息
                  content: contentBase64, // Base64 编码后的内容
                });
                console.log('Subscription link file created successfully!');
              } else {
                console.error('Error updating/creating subscription link file:', error);
                throw error; // 抛出错误，让工作流失败
              }
            }
